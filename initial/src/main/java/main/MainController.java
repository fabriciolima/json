package main;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.imageio.ImageIO;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.CoordinateFilter;
import com.vividsolutions.jts.geom.CoordinateSequenceComparator;
import com.vividsolutions.jts.geom.CoordinateSequenceFilter;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryComponentFilter;
import com.vividsolutions.jts.geom.GeometryFilter;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;

@Controller// This means that this class is a Controller
@RequestMapping(path="/json") // This means URL's start with /demo (after Application path)
@CrossOrigin(origins = "*", allowCredentials = "true", allowedHeaders = "*")
public class MainController {
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired private JogoRepository jogoRepository;
	@Autowired private JogoClienteRepository jogoClienteRepository;
	@Autowired private ClienteRepository clienteRepository;
	@Resource private ClienteRepositoryJPA clienteRepositoryJPA;
	@Autowired private PlataformaRepository plataformaRepository;

	//@GetMapping(path="/add") // Map ONLY GET Requests
	@PostMapping(path="/add") // Map ONLY GET Requests
	@CrossOrigin(origins = "http://localhost:8080", maxAge = 3600)
	public @ResponseBody String addNovoJogoCliente (
			@RequestParam String console
			, @RequestParam String idCliente
			, @RequestParam String estado
			, @RequestParam String nome
			, @RequestParam String comentario ) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		List<Jogo> listaJogo = jogoRepository.findByNome(nome);
		System.out.println(listaJogo);
		Jogo jogo;
		if(listaJogo.size() == 0) {
			jogo = new Jogo();
			jogo.setNome(nome);
			jogo.setRevisao(1);
			System.out.println("Cadastrando novo jogo: ".concat(nome));
			jogoRepository.save(jogo);
		}else {
			jogo = listaJogo.get(0);
		}
		
		JogoCliente jogoCliente = new JogoCliente();
//		jogoCliente.setIdCliente(clienteRepository.findById(Long.valueOf(idCliente)).getId());
//		jogoCliente.setDataCadastro(new Date());
//		jogoCliente.setIdJogo(jogo.getId());
		jogoCliente.setEstadoDoJogo(Integer.valueOf(estado));
		jogoClienteRepository.save(jogoCliente);
		
		return String.valueOf(jogoCliente.getId());
	}

	@PostMapping(path="/cliente/add") // Map ONLY GET Requests
	@CrossOrigin(origins = "http://localhost:8080", maxAge = 3600)
	public @ResponseBody String addCliente (@RequestParam String nome
			, @RequestParam String telefone, @RequestParam String localizacao ) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		String retorno = "erro";
		System.out.println(localizacao);
		
		try {
			if(telefone != null && telefone.length()>1) {
				Cliente c = clienteRepository.findByTelefone(telefone);
				System.out.println("nenhum telefone encontrado");
				if(c == null) {
					c= new Cliente();
				}
				c.setNome(nome);
				c.setTelefone(telefone);
				c.setLocalizacao(localizacao);
				clienteRepository.save(c);
		
				retorno = c.getId().toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Erro inserindo");
			
		}
		return retorno;
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/plataforma")
	public @ResponseBody Iterable<Plataforma> getAllPlataforma() {
		// This returns a JSON or XML with the users
		return plataformaRepository.findAll();
	}
	
	@GetMapping(path="/jogo")
	@CrossOrigin(origins = "*", maxAge = 3600)
	public @ResponseBody Page<Jogo> getJogoDatas(Pageable pageable) {
		System.out.println(pageable);
		//List<Jogo> retorno = JogoDAO.procura();
		//List<Jogo> findByDataModificadoGreaterThanEqual = jogoRepository.findByDataModificadoGreaterThanEqual(new Date());
		Page<Jogo> retorno = jogoRepository.findAll(pageable);
		
		return retorno;
	}
	
	@GetMapping(path="/meusjogos")
	@CrossOrigin(origins = "*", maxAge = 3600)
	public @ResponseBody List<JogoCliente> getmeusJogo(@RequestParam String idCliente) {
		List<JogoCliente> retorno = (List<JogoCliente>) jogoClienteRepository.findAll();
		System.out.println(retorno.size());
		//List<Jogo> findByDataModificadoGreaterThanEqual = jogoRepository.findByDataModificadoGreaterThanEqual(new Date());
		
		return retorno;
	}
	
	@GetMapping(path="/jogosperto")
	@CrossOrigin(origins = "*", maxAge = 3600)
	public @ResponseBody List<JogoPertoVO> getJogosPerto(){//@RequestParam String idCliente) {
		List<JogoPertoVO> retorno = new ArrayList<JogoPertoVO>();
		
		WKTReader reader = new WKTReader();
//		
		try {
			System.out.println("teste");
			Geometry ponto= reader.read("Point(15 10)");
			System.out.println(ponto);
			List<Object[]> list = null;
			if(ponto != null)
				list = clienteRepositoryJPA.procuraJogosPerto(ponto);
			for(Object[] obj:list) {
				String nomecliente = obj[0].toString();
				String idcliente  = obj[1].toString();
				String localizacao = obj[2].toString();
				String idjogo = obj[3].toString();
				String nomejogo = obj[4].toString();
				String idplataforma = obj[5].toString();
				String nomeplataforma = obj[6].toString();
				String dist  = obj[7].toString();
				//System.out.println(obj[8]);
				String estadojogo = obj[8]==null?"3":obj[8].toString();
				
				JogoPertoVO jp = new JogoPertoVO();
				jp.setIdCliente(idcliente);
				jp.setIdJogo(idjogo);
				jp.setIdPlataforma(idplataforma);
				jp.setNomeCliente(nomecliente);
				jp.setNomeJogo(nomejogo);
				jp.setNomePlataforma(nomeplataforma);
				//Integer distancia = Integer.valueOf(dist);
				jp.setDistancia(dist.concat(" KM"));				
				jp.setEstadoDoJogo(estadojogo);
				retorno.add(jp);
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			System.out.println(e.getMessage());
			return null;
		}
//		List<Cliente> procura = clienteRepositoryJPA.findByLocalizacao(reader.read("Point(-15 10)"));
//		for (Cliente c:procura) {
//			for(JogoCliente jc:c.getListaJogoCliente()) {
//				JogoPertoVO jp = new JogoPertoVO();
//				jp.setDistancia("0");
//				jp.setEstadoDoJogo(jc.getEstadoDoJogo());
//				jp.setIdCliente(jc.getCliente().getId());
//				jp.setIdJogo(jc.getJogo().getId());
//				jp.setIdPlataforma(jc.getPlataforma().getId());
//				jp.setNomeCliente(c.getNome());
//				jp.setNomeJogo(jc.getJogo().getNome());
//				jp.setNomePlataforma(jc.getPlataforma().getNome());
//				retorno.add(jp);
//				
//			}
//		}
		
		return retorno;
	}
	
	@GetMapping(path="/p")
	public @ResponseBody String processa() {
		Iterable<Jogo> listaJogo = jogoRepository.findAll();
		//List<Jogo> findByDataModificadoGreaterThanEqual = jogoRepository.findByDataModificadoGreaterThanEqual(new Date());
		
		for(Jogo j:listaJogo) 
			if(j.getId() > 892)
		{
			//System.out.println(j.getId());
			try {
		        
				// can only grab first 100 results
				//String userAgent = "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36";
				String userAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36";
				String url = "https://www.google.com/search?site=imghp&tbm=isch&source=hp&gws_rd=cr&q=cover game ";
				url = url.concat(j.getNome());

				List<String> resultUrls = new ArrayList<String>();

				Document doc = Jsoup.connect(url)
						.userAgent(userAgent).referrer("https://www.google.com/").get();

				Elements elements = doc.select("div.rg_meta");

				JSONObject jsonObject;
				for (Element element : elements) {
					if (element.childNodeSize() > 0) {
						jsonObject = (JSONObject) new JSONParser().parse(element.childNode(0).toString());
						resultUrls.add((String) jsonObject.get("ou"));
					}
				}

				for (String imageUrl : resultUrls) 
				{
					try {
//						String imageUrl = resultUrls.get(0);
						String arq = imageUrl.substring(imageUrl.lastIndexOf("/")+1,imageUrl.length());
						String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
						String arqSemExt = arq.substring(0, arq.length()-4);

						//System.out.println(imageUrl+" -> "+imageUrl.substring(imageUrl.lastIndexOf("/")+1,imageUrl.length()));
						System.out.println(j.getId());
						saveProxy(imageUrl, "images/"+String.valueOf(j.getId())+"."+arqExt );
						break;
					} catch (Exception e) {
						System.out.println("erro: "+ imageUrl);
						System.out.println(e.getMessage());
					}
				}
			}catch (Exception e) {
				e.printStackTrace();
			}
		}
			return "Sucesso";

	}
	
	public static void saveProxy(String imageUrl, String arq) throws Exception {
		String userAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36";	
		URL url = new URL(imageUrl);
		HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
	    httpcon.addRequestProperty("User-Agent", userAgent);

	    BufferedReader in = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));


			// Open a connection to the URL using the proxy information.
			InputStream inStream = httpcon.getInputStream();

			// BufferedImage image = ImageIO.read(url);
			// Use the InputStream flavor of ImageIO.read() instead.
			BufferedImage image = ImageIO.read(inStream);

			String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
			ImageIO.write(image, arqExt, new File(arq));

	}

public static void saveImageByUrl(String urlString, String arq)throws Exception {
		
	BufferedImage image = null;
		URL url = new URL(urlString);
		image = ImageIO.read(url);
		File toCreate = new File(arq);
		String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
		ImageIO.write(image, arqExt, toCreate);	
}

}