package main;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.imageio.ImageIO;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.GeoPoint;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.crypto.DirectEncrypter;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;

import main.entidade.Cliente;
import main.entidade.Jogo;
import main.entidade.JogoCliente;
import main.entidade.JogoClienteVO;
import main.entidade.JogoPertoVO;
import main.entidade.Plataforma;
import main.entidade.Troca;
import main.negocio.JogoNegocio;
import main.repositorio.ClienteRepository;
import main.repositorio.ClienteRepositoryJPA;
import main.repositorio.JogoClienteRepository;
import main.repositorio.PlataformaRepository;
import main.repositorio.TrocaRepository;

@Controller// This means that this class is a Controller
@RequestMapping(path="/json") // This means URL's start with /demo (after Application path)
@CrossOrigin(origins = "*", allowCredentials = "true", allowedHeaders = "*")
public class MainController {
	
	Firestore db;
	
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired private JogoRepository jogoRepository;
	@Autowired private JogoClienteRepository jogoClienteRepository;
	@Autowired private ClienteRepository clienteRepository;
	@Autowired private TrocaRepository trocaRepository;
	@Resource private ClienteRepositoryJPA clienteRepositoryJPA;
	@Autowired private PlataformaRepository plataformaRepository;

	//@GetMapping(path="/add") // Map ONLY GET Requests
	@PostMapping(path="/jogo/add") // Map ONLY GET Requests
	@CrossOrigin(origins = "http://localhost:8080", maxAge = 3600)
	@Transactional
	public @ResponseBody String adicionaJogoCliente (
			@RequestParam String idPlataforma
			, @RequestParam String idCliente
			, @RequestParam String estado
			, @RequestParam String nomePesquisa
			, @RequestParam String nomeJogo
			, @RequestParam String dinheiro )
	{

		if(db==null) {
			FireBaseDB fire = new FireBaseDB();
			try {
				db = fire.getDb();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		JogoNegocio jogoNegocio = new JogoNegocio();
		Jogo jogo=null;;
		try {
			jogo = jogoNegocio.getJogo(db, jogoRepository, nomeJogo, nomePesquisa);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Plataforma plataforma = plataformaRepository.findById(Long.decode(idPlataforma));
		
		
		//salva no firebase
//		Map<String, Object> jogoCliente = new HashMap<>();
//		jogoCliente.put("idplataforma", idPlataforma);
//		jogoCliente.put("idjogo", jogo.getUid());
//		jogoCliente.put("idcliente",idCliente);
//		jogoCliente.put("estado", estado);
//		jogoCliente.put("nomepesquisa",nomePesquisa );
//		jogoCliente.put("nomejogo", nomeJogo);
//		jogoCliente.put("dinheiro",dinheiro);
//		jogoCliente.put("ultimaabertura", new Date());
//		jogoCliente.put("dataApagado","");
//		
//		ApiFuture<DocumentReference> jogoClienteRef = db.collection("jogocliente").add(jogoCliente);
		
		//salva no mysql
		JogoCliente jogoClienteSQL = new JogoCliente();
		Cliente cliente = clienteRepository.findById(Long.decode(idCliente));
		
		jogoClienteSQL.setCliente(cliente);
		jogoClienteSQL.setJogo(jogo);
		jogoClienteSQL.setPlataforma(plataforma);
		jogoClienteSQL.setDataCadastro(new Date());
		jogoClienteSQL.setDataUltimaAbertura(new Date());
		jogoClienteSQL.setEstadoDoJogo(Integer.valueOf(estado));
		jogoClienteRepository.save(jogoClienteSQL);
		System.out.println("Novo JogoCliente: ".concat(jogoClienteSQL.getId().toString()));
		return jogoClienteSQL.getId().toString();
	}

	
	@PostMapping(path="/cliente/add") // Map ONLY GET Requests
	@CrossOrigin(origins = "http://localhost:8080", maxAge = 3600)
	public @ResponseBody String adicionaCliente(
			@RequestParam String nome, 
			@RequestParam String uid, 
			@RequestParam String lat, 
			@RequestParam String lon) {

		String retorno="";
		System.out.println(lat);
		
		try {
			
			if(db==null) {
				FireBaseDB fire = new FireBaseDB();
				db = fire.getDb();
			}
			GeoPoint localizacao = new GeoPoint(Double.parseDouble(lat), Double.parseDouble(lon));
			WKTReader reader = new WKTReader();
			Geometry ponto= reader.read("Point(".concat(lon).concat(" ").concat(lat).concat(")").replaceAll(",", "."));

			Cliente c = clienteRepository.findByUid(uid);
			if(c == null) {
				c= new Cliente();
				Map<String, Object> cliente = new HashMap<>();
				cliente.put("nome",nome);
				cliente.put("localizacao", localizacao);
				ApiFuture<DocumentReference> clienteRef = db.collection("cliente").add(cliente);
				
				
				c.setNome(nome);
				c.setUid(clienteRef.get().getId());
				c.setLocalizacao(ponto);
				clienteRepository.save(c);
				retorno = c.getId().toString();
				System.out.println("novo Cliente ID: " + retorno);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Erro inserindo");
			
		}
		return retorno;
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/plataforma")
	public @ResponseBody Iterable<Plataforma> getAllPlataforma() {
		// This returns a JSON or XML with the users
		return plataformaRepository.findAll();
	}
	
	@GetMapping(path="/jogo")
	@CrossOrigin(origins = "*", maxAge = 3600)
	public @ResponseBody Page<Jogo> getJogoDatas(Pageable pageable) {
		System.out.println(pageable);
		//List<Jogo> retorno = JogoDAO.procura();
		//List<Jogo> findByDataModificadoGreaterThanEqual = jogoRepository.findByDataModificadoGreaterThanEqual(new Date());
		Page<Jogo> retorno = jogoRepository.findAll(pageable);
		
		return retorno;
	}
	
	
	@GetMapping(path="/jogosperto")
	@CrossOrigin(origins = "*", maxAge = 3600)
	public @ResponseBody List<JogoPertoVO> getJogosPerto(@RequestParam String pos, Pageable page) {
//		String pos = "Point(0 0)";
		String position = pos.substring(0, 5).toLowerCase().equals("point")?pos:"Point(".concat(pos).concat(")");
		System.out.println(page);
		System.out.println();
		System.out.println(position);
		List<JogoPertoVO> retorno = new ArrayList<JogoPertoVO>();
		try {
			System.out.println("teste");
			WKTReader reader = new WKTReader();
			Geometry ponto= reader.read(position);
		
		
			System.out.println(ponto);
			List<Object[]> list = null;
			if(ponto != null)
				list = clienteRepositoryJPA.procuraJogosPerto(ponto,page);
			for(Object[] obj:list) {
				String nomecliente = obj[0].toString();
				String idcliente  = obj[1].toString();
				String localizacao = obj[2].toString();
				String idjogo = obj[3].toString();
				String nomejogo = obj[4].toString();
				String idplataforma = obj[5].toString();
				String nomeplataforma = obj[6].toString();
				String dist  = obj[7].toString().replaceAll(".0", "");
				//System.out.println(obj[8]);
				String estadojogo = obj[8]==null?"3":obj[8].toString();
				String idJogoCliente = obj[9].toString();
				
				JogoPertoVO jp = new JogoPertoVO();
				jp.setIdCliente(idcliente);
				jp.setIdJogo(idjogo);
				jp.setIdPlataforma(idplataforma);
				jp.setNomeCliente(nomecliente);
				jp.setNomeJogo(nomejogo);
				jp.setNomePlataforma(nomeplataforma);
				//Integer distancia = Integer.valueOf(dist);
				jp.setDistancia(dist);	
				jp.setEstadoDoJogo(estadojogo);
				jp.setIdJogoCliente(idJogoCliente);
				retorno.add(jp);
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			System.out.println(e.getMessage());
			return null;
		}
		return retorno;
	}
	
	//@GetMapping(path="/p")
	public @ResponseBody String processa() {
		Iterable<Jogo> listaJogo = jogoRepository.findAll();
		//List<Jogo> findByDataModificadoGreaterThanEqual = jogoRepository.findByDataModificadoGreaterThanEqual(new Date());
		
		for(Jogo j:listaJogo) 
		{
			File fJPG = new File("images/"+String.valueOf(j.getId())+".JPG");
			File fPNG = new File("images/"+String.valueOf(j.getId())+".PNG");
			if(fPNG.exists() || fJPG.exists()) { 
			    System.out.println(String.valueOf(j.getId()).concat(" - OK"));
			}
			else
			try {
		        
				// can only grab first 100 results
				//String userAgent = "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36";
				String userAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36";
				String url = "https://www.google.com/search?site=imghp&tbm=isch&source=hp&gws_rd=cr&q=cover game ";
				String filename = "A20/B22b#öA\\BC#Ä$%ld_ma.la.xps";
				
				url = url.concat(j.getNome().replaceAll("[^a-zA-Z0-9\\._]+", " "));

				List<String> resultUrls = new ArrayList<String>();

				Document doc = Jsoup.connect(url)
						.userAgent(userAgent).referrer("https://www.google.com/").get();

				Elements elements = doc.select("div.rg_meta");

				JSONObject jsonObject;
				for (Element element : elements) {
					try {
						if (element.childNodeSize() > 0) {
							jsonObject = (JSONObject) new JSONParser().parse(element.childNode(0).toString());
							resultUrls.add((String) jsonObject.get("ou"));
						}
					} catch (Exception e) {
					
					}
				}

				for (String imageUrl : resultUrls) 
				{
					try {
						if(imageUrl.indexOf(".png") > 0)
							imageUrl = imageUrl.substring(0,imageUrl.indexOf(".png")+4);
						else
							imageUrl = imageUrl.substring(0,imageUrl.indexOf(".jpg")+4);
						System.out.println(imageUrl);
//						String imageUrl = resultUrls.get(0);
						String arq = imageUrl.substring(imageUrl.lastIndexOf("/")+1,imageUrl.length());
						String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
						String arqSemExt = arq.substring(0, arq.length()-4);

						//System.out.println(imageUrl+" -> "+imageUrl.substring(imageUrl.lastIndexOf("/")+1,imageUrl.length()));
						System.out.println(j.getId());
						//saveProxy(imageUrl, "images/"+String.valueOf(j.getId())+"."+arqExt );
						System.out.println("ok");
						break;
					} catch (Exception e) {
						System.out.println("erro: "+ imageUrl);
						//System.out.println(e.getMessage());
					}
				}
			}catch (Exception e) {
				e.printStackTrace();
			}
		}
			return "Sucesso";

	}
	
//	public static void saveProxy(String imageUrl, String arq) {
//		String userAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36";	
//		URL url = new URL(imageUrl);
//		HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
//	    httpcon.addRequestProperty("User-Agent", userAgent);
//
//	    BufferedReader in = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
//
//
//			// Open a connection to the URL using the proxy information.
//			InputStream inStream = httpcon.getInputStream();
//
//			// BufferedImage image = ImageIO.read(url);
//			// Use the InputStream flavor of ImageIO.read() instead.
//			BufferedImage image = ImageIO.read(inStream);
//
//			String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
//			ImageIO.write(image, arqExt, new File(arq));
//
//	}
//
//public static void saveImageByUrl(String urlString, String arq)throws Exception {
//		
//	BufferedImage image = null;
//		URL url = new URL(urlString);
//		image = ImageIO.read(url);
//		File toCreate = new File(arq);
//		String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
//		ImageIO.write(image, arqExt, toCreate);	
//}

public @ResponseBody void inserejogoliente(@RequestParam String qtde) {
	double minLat = -89.00;
	double maxLat = 89.00;      
	double minLon = -178.00;
	double maxLon = 178.00;     
	DecimalFormat df = new DecimalFormat("###.######");
	WKTReader reader = new WKTReader();

	Map<String, Object> docData = new HashMap<>();

	Firestore db ;//= FirebaseFirestore .getInstance();
	Iterable<JogoCliente> listaJC = jogoClienteRepository.findAll();
	for(JogoCliente jc:listaJC) {
		docData.put("estadojogo", jc.getEstadoDoJogo());
		docData.put("idjogo", jc.getJogo().getId());
		docData.put("idcliente", jc.getCliente().getId());
		docData.put("idplataforma", jc.getPlataforma().getId());

//		ApiFuture<WriteResult> future = db.collection("jogocliente").document(String.valueOf(jc.getId())).set(docData);
//		// future.get() blocks on response
//		System.out.println("Update time : " + future.get().getUpdateTime());
	}
	
}


//public @ResponseBody void processa2(@RequestParam String qtde) throws ParseException {
//	double minLat = -89.00;
//	double maxLat = 89.00;      
//	double minLon = -178.00;
//	double maxLon = 178.00;     
//	DecimalFormat df = new DecimalFormat("###.######");
//	WKTReader reader = new WKTReader();
//
//	//Iterable<Cliente> listaCliente = clienteRepository.findAll();
//	//for(Cliente c:listaCliente) {
//	for(int cont =0 ; cont< Integer.parseInt(qtde); cont++) {
//		double longitude = minLon + (double)(Math.random() * ((maxLon - minLon) + 1));
//		double latitude = minLat + (double)(Math.random() * ((maxLat - minLat) + 1));
//		Geometry ponto= reader.read("Point(".concat(df.format(longitude)).concat(" ").concat(df.format(latitude).concat(")")).replaceAll(",", "."));
//		Cliente c = new Cliente();
//		c.setLocalizacao(ponto);
//		c.setNome(nomeRandom());
//		c.setTelefone(telRandom());
//		System.out.println(cont);
//		try {
//			clienteRepository.save(c);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
//}


public String nomeRandom() {
	final java.util.Random rand = new java.util.Random();
	final String lexicon = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
    StringBuilder builder = new StringBuilder();
    int length = rand.nextInt(5)+5;
    for(int i = 0; i < length; i++) {
        builder.append(lexicon.charAt(rand.nextInt(lexicon.length())));
    }
    return builder.toString();
}

public String telRandom() {
	final java.util.Random rand = new java.util.Random();
	final String lexicon = "12345674890";
    StringBuilder builder = new StringBuilder();
    int length = 10;
    for(int i = 0; i < length; i++) {
        builder.append(lexicon.charAt(rand.nextInt(lexicon.length())));
    }
    return builder.toString();
}

public String getEncrypt(String dado) throws Exception {
	KeyGenerator keyGen = KeyGenerator.getInstance("AES");
	keyGen.init(128);
	SecretKey key = keyGen.generateKey();

	// Create the header
	JWEHeader header = new JWEHeader(JWEAlgorithm.DIR, EncryptionMethod.A128GCM);

	// Set the plain text
	Payload payload = new Payload(dado);

	// Create the JWE object and encrypt it
	JWEObject jweObject = new JWEObject(header, payload);
	jweObject.encrypt(new DirectEncrypter(key));

	// Serialise to compact JOSE form...
	String jweString = jweObject.serialize();

	return jweString;
	
}

@GetMapping(path="/teste")
public @ResponseBody String testes() {

	return "server ok";
}

@PostMapping(path="/jogo/troca/add") // Map ONLY GET Requests
@CrossOrigin(origins = "http://localhost:8080", maxAge = 3600)
@Transactional
public @ResponseBody String adicionaJogoTroca(
		@RequestParam String idJogoCliente,
		@RequestParam ArrayList<String> jogosTroca)
{

	if(db==null) {
		FireBaseDB fire = new FireBaseDB();
		try {
			db = fire.getDb();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	System.out.println(jogosTroca);
	//salva no firebase
//	Map<String, Object> jogoCliente = new HashMap<>();
//	jogoCliente.put("idplataforma", idPlataforma);
//	jogoCliente.put("idjogo", jogo.getUid());
//	jogoCliente.put("idcliente",uidCliente);
//	jogoCliente.put("estado", estado);
//	jogoCliente.put("nomepesquisa",nomePesquisa );
//	jogoCliente.put("nomejogo", nomeJogo);
//	jogoCliente.put("dinheiro",dinheiro);
//	jogoCliente.put("dataApagado","");
//	
//	ApiFuture<DocumentReference> jogoClienteRef = db.collection("jogocliente").add(jogoCliente);
	return null;
	
}

@PostMapping(path="/fazproposta") // Map ONLY GET Requests
@CrossOrigin(origins = "http://localhost:8080", maxAge = 3600)
public @ResponseBody String fazProposta(
		@RequestParam String funcao, 
		@RequestParam Long idinteresse, 
		@RequestParam Long idproposta) {
	
	String retorno = "error";
	JogoCliente jcInteresse = jogoClienteRepository.findById(idinteresse);
	JogoCliente jcProposta = jogoClienteRepository.findById(idproposta);
	if(jcInteresse!= null && jcProposta != null) {
		List<Troca> byInteresseAndProposta = trocaRepository.findByInteresseAndProposta(jcInteresse, jcProposta);
		if(byInteresseAndProposta.size() > 0 && funcao.equals("remove")) {
			trocaRepository.delete(byInteresseAndProposta.get(0));
			retorno = "del";
		}else {
			if(byInteresseAndProposta.size() == 0 && funcao.equals("adiciona")) {
				Troca troca = new Troca();
				troca.setDataCadastro(new Date());
				troca.setInteresse(jcInteresse);
				troca.setProposta(jcProposta);
				trocaRepository.save(troca);
				retorno = "add";
			} 
		}
	}
	return retorno;
}


@GetMapping(path="/meusjogos")
@CrossOrigin(origins = "*", maxAge = 3600)
public @ResponseBody List<JogoClienteVO> getmeusJogo(
		@RequestParam String idcliente,
		@RequestParam String idinteresse) {
	Cliente cliente = clienteRepository.findById(Long.parseLong(idcliente));
	List<JogoCliente> jogoCliente = jogoClienteRepository.findByCliente(cliente);

	List<JogoClienteVO> retorno = new ArrayList<JogoClienteVO>();
	if(jogoCliente.size()>0) {
		for(JogoCliente jc:jogoCliente)
		{
			JogoClienteVO jogoClienteVO =new JogoClienteVO();
			jogoClienteVO.setId(jc.getId());
			jogoClienteVO.setIdJogo(jc.getJogo().getId().toString());
			jogoClienteVO.setNomeJogo(jc.getJogo().getNome());
			jogoClienteVO.setIdPlataforma(jc.getPlataforma().getId().toString());
			jogoClienteVO.setNomePlataforma(jc.getPlataforma().getNome());
			List<Troca> byInteresse = trocaRepository.findByInteresse(jc);
			jogoClienteVO.setQtdInteressados(String.valueOf(byInteresse.size()));
			
			if(idinteresse != null) {//usado na tela de propostas
				JogoCliente jcInteresse = jogoClienteRepository.findById(Long.parseLong(idinteresse));
//				List<Troca> listaInteressado = trocaRepository.findByInteressado(jcInteresse);
				List<Troca> listaInteresseInteressado = trocaRepository.findByInteresseAndProposta(jcInteresse, jc);
				if(listaInteresseInteressado.size() > 0) {
					jogoClienteVO.setPossuiPropostaCom(idinteresse);
					//jogoClienteVO.set
				}
				
			retorno.add(jogoClienteVO);
			}
		}
	}
	//List<Jogo> findByDataModificadoGreaterThanEqual = jogoRepository.findByDataModificadoGreaterThanEqual(new Date());
	
	return retorno;
}

@GetMapping(path="/jogocliente")
@CrossOrigin(origins = "*", maxAge = 3600)
public @ResponseBody JogoClienteVO getJogoCliente(
		@RequestParam String idjogocliente) {
	JogoCliente jc = jogoClienteRepository.findById(Long.parseLong(idjogocliente));

	JogoClienteVO jogoClienteVO = new JogoClienteVO();
	if(jc != null) {
			jogoClienteVO.setId(jc.getId());
			jogoClienteVO.setIdJogo(jc.getJogo().getId().toString());
			jogoClienteVO.setNomeJogo(jc.getJogo().getNome());
			jogoClienteVO.setIdPlataforma(jc.getPlataforma().getId().toString());
			jogoClienteVO.setNomePlataforma(jc.getPlataforma().getNome());
			List<Troca> byInteresse = trocaRepository.findByInteresse(jc);
			jogoClienteVO.setQtdInteressados(String.valueOf(byInteresse.size()));
		}
	
	return jogoClienteVO;
}


}
