package main;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.stereotype.Component;

import main.entidade.Jogo;


//import org.springframework.boot.autoconfigure.SpringBootApplication;

//@SpringBootApplication
@Component("testes")
public class Testes {
	@Autowired private static JogoRepository jogoRepository;
	
	

//	@Autowired // This means to get the bean called userRepository
//    // Which is auto-generated by Spring, we will use it to handle the data
//private UserRepository userRepository;
//@Autowired private JogoClienteRepository jogoClienteRepository;
//@Autowired private ClienteRepository clienteRepository;
//@Autowired private static ClienteRepositoryJPA clienteRepositoryJPA;
//@Autowired private PlataformaRepository plataformaRepository;

	public static void main(String[] args) {

		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
		try {
			ctx.register(Testes.class);
			ctx.refresh();
			Testes teste = (Testes) ctx.getBean("testes");
			teste.processa(ctx);
		} finally {
			ctx.close();
		}
         
	
	}
	
	public static double getDistancia(double latitude, double longitude, double latitudePto, double longitudePto){
	    double dlon, dlat, a, distancia;
	    dlon = longitudePto - longitude;
	    dlat = latitudePto - latitude;
	    a = Math.pow(Math.sin(dlat/2),2) + Math.cos(latitude) * Math.cos(latitudePto) * Math.pow(Math.sin(dlon/2),2);
	    distancia = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
//		return 6378140 * distancia; /* 6378140 is the radius of the Earth in meters*/
	    return 111194.682*distancia;
	}


	//@GetMapping(path="/p")
		public void processa(ApplicationContext ctx) {
			Iterable<Jogo> listaJogo = jogoRepository.findAll();
//			List<Jogo> findByDataModificadoGreaterThanEqual = jogoRepository.findByDataModificadoGreaterThanEqual(new Date());
			
			for(Jogo j:listaJogo)
			{
				File fJPG = new File("images/"+String.valueOf(j.getId())+".JPG");
//				File fPNG = new File("images/"+String.valueOf(j.getId())+".PNG");
//				if(fPNG.exists() || fJPG.exists()) { 
//				    System.out.println(String.valueOf(j.getId()).concat(" - OK"));
//				}
//				else
				try {
			        
					// can only grab first 100 results
					//String userAgent = "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36";
					String userAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36";
//					String url = "http://www.trocajogo.com.br/pt-BR/search?k= ";
					String url = "https://www.google.com.br/search?q=";
					String filename = "A20/B22b#öA\\BC#Ä$%ld_ma.la.xps";
					
					url = url.concat(j.getNome().replaceAll("[^a-zA-Z0-9\\._]+", "+")
							.replaceAll(" ", "+")
							.concat("http://cdn.trocajogo.net/files/gameplataforma/capa/"));

					List<String> resultUrls = new ArrayList<String>();

					Document doc = Jsoup.connect(url)
							.userAgent(userAgent).referrer("https://www.google.com/").get();

					Elements elements = doc.select("img");

					JSONObject jsonObject;
					for (Element element : elements) {
						try {
							if (element.childNodeSize() > 0) {
								jsonObject = (JSONObject) new JSONParser().parse(element.childNode(0).toString());
								resultUrls.add((String) jsonObject.get("ou"));
							}
						} catch (Exception e) {
						
						}
					}

					for (String imageUrl : resultUrls) 
					{
						try {
							if(imageUrl.indexOf(".png") > 0)
								imageUrl = imageUrl.substring(0,imageUrl.indexOf(".png")+4);
							else
								imageUrl = imageUrl.substring(0,imageUrl.indexOf(".jpg")+4);
							System.out.println(imageUrl);
//							String imageUrl = resultUrls.get(0);
							String arq = imageUrl.substring(imageUrl.lastIndexOf("/")+1,imageUrl.length());
//							String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
							String arqExt = "jpg";
//							String arqSemExt = arq.substring(0, arq.length()-4);

							//System.out.println(imageUrl+" -> "+imageUrl.substring(imageUrl.lastIndexOf("/")+1,imageUrl.length()));
							System.out.println(j.getId());
							saveProxy(imageUrl, "images/"+String.valueOf(j.getId())+"."+arqExt );
							System.out.println("ok");
							break;
						} catch (Exception e) {
							System.out.println("erro: "+ imageUrl);
							//System.out.println(e.getMessage());
						}
					}
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
	

		}

		public static void saveProxy(String imageUrl, String arq) throws Exception {
			String userAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36";	
			URL url = new URL(imageUrl);
			HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
		    httpcon.addRequestProperty("User-Agent", userAgent);

		    BufferedReader in = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));


				// Open a connection to the URL using the proxy information.
				InputStream inStream = httpcon.getInputStream();

				// BufferedImage image = ImageIO.read(url);
				// Use the InputStream flavor of ImageIO.read() instead.
				BufferedImage image = ImageIO.read(inStream);

				String arqExt = arq.substring(arq.length()-3,arq.length()).toUpperCase();
				ImageIO.write(image, arqExt, new File(arq));

		}
}
